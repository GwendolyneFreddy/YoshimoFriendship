# Author: AL|EN
# Email: alienquake@hotmail.com
on:
  release:
    types: [published]
jobs:
  AddModPackagesToLatestRelease:
    runs-on: windows-latest
    steps:

      - name: Clone repository using 'github.ref' from release
        uses: actions/checkout@master

      - name: Get value of the VERSION keyword from mod file
        if: success()
        id: GetModVersion
        run: |
          function Get-IEModVersion ($Path) {
              $regexVersion = [Regex]::new('.*?VERSION(\s*)(|~"|~|"|)(@.+|.+)("~|"|~|)(|\s*)', [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)
              foreach ($line in [System.IO.File]::ReadLines($Path)) {
                  $line = $line -replace "\/\/(.*)(\n|)"
                  if ($line -match "\S" -and $line -notmatch "\/\*[\s\S]*?\*\/") {
                      if ($regexVersion.IsMatch($line)) {
                          [string]$dataVersionLine = $regexVersion.Matches($line).Groups[3].Value.ToString().trimStart(' ').trimStart('~').trimStart('"').TrimEnd(' ').TrimEnd('~').TrimEnd('"')
                          $dataVersionLine
                          break
                      }
                  }
              }
          }

          $ModTopDirectory = $PWD

          Write-Host $ModTopDirectory # D:\a\ActionTest\ActionTest

          $ModMainFile = (Get-ChildItem -Path $PWD -Recurse -Depth 1 -Include "*.tp2", "*.tp3")[0]

          Write-Host $ModMainFile.FullName # D:\a\ActionTest\ActionTest\ActionTest\ActionTest.tp2
          $ModID = $ModMainFile.BaseName -replace 'setup-'

          $weiduExeBaseName = "Setup-$ModID"

          $ModVersion = Get-IEModVersion -Path $ModMainFile.FullName
          if ($null -eq $ModVersion -or $ModVersion -eq '') {
              Write-Host "Cannot detect VERSION keyword"
              Exit 1
          } else {
              $ModVersion -replace "\s+", '_'
              Write-Host "##[set-output name=ModVersion;]$($ModVersion)"
          }

      - name: Create mod packages
        id: CreateModPackage
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          function Get-IEModVersion ($Path) {
              $regexVersion = [Regex]::new('.*?VERSION(\s*)(|~"|~|"|)(@.+|.+)("~|"|~|)(|\s*)', [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)
              foreach ($line in [System.IO.File]::ReadLines($Path)) {
                  $line = $line -replace "\/\/(.*)(\n|)"
                  if ($line -match "\S" -and $line -notmatch "\/\*[\s\S]*?\*\/") {
                      if ($regexVersion.IsMatch($line)) {
                          [string]$dataVersionLine = $regexVersion.Matches($line).Groups[3].Value.ToString().trimStart(' ').trimStart('~').trimStart('"').TrimEnd(' ').TrimEnd('~').TrimEnd('"')
                          $dataVersionLine
                          break
                      }
                  }
              }
          }

          $Token = $ENV:GITHUB_TOKEN
          $Base64Token = [System.Convert]::ToBase64String([char[]]$Token)
          $Headers = @{ Authorization = 'Basic {0}' -f $Base64Token }

          $ModTopDirectory = $PWD

          Write-Host $ModTopDirectory # D:\a\ActionTest\ActionTest

          $ModMainFile = (Get-ChildItem -Path $PWD -Recurse -Depth 1 -Include "*.tp2", "*.tp3")[0]

          Write-Host $ModMainFile.FullName # D:\a\ActionTest\ActionTest\ActionTest\ActionTest.tp2
          $ModID = $ModMainFile.BaseName -replace 'setup-'

          $weiduExeBaseName = "Setup-$ModID"

          $ModVersion = Get-IEModVersion -Path $ModMainFile.FullName
          if ($null -eq $ModVersion -or $ModVersion -eq '') {
              Write-Host "Cannot read VERSION keyword"
              Exit 1
          }

          $iniData = try { Get-Content $ModTopDirectory\$ModID\$ModID.ini -EA 0 } catch { }
          if ($iniData) {
              $ModDisplayName = (($iniData | ? { $_ -notlike "*#*" -and $_ -like "Name*=*" }) -split '=')[1].TrimStart(' ').TrimEnd(' ')

              # Github release asset name limitation
              $PackageName = "$($ModDisplayName -replace "\s",'-')-$($ModVersion -replace "\s",'-')"

          } else {
              $PackageName = "$($ModID -replace "\s",'-')-$($ModVersion -replace "\s",'-')"
          }

          Write-Host "$PackageName"

          $outIEMod = "$ModID-iemod"
          $outZip = "$ModID-zip"

          Write-Host "$outIEMod $outZip"

          # temp dir
          if ($PSVersionTable.PSEdition -eq 'Desktop' -or $isWindows) {
              $tempDir = Join-path -Path $env:TEMP -ChildPath (Get-Random)
          } else {
              $tempDir = Join-path -Path '/tmp' -ChildPath (Get-Random)
          }

          New-Item -Path $tempDir\$outIEMod\$ModID -ItemType Directory -Force | Out-Null
          New-Item -Path $tempDir\$outZip\$ModID -ItemType Directory -Force | Out-Null

          Write-Host "$tempDir\$outIEMod\$ModID"
          Write-Host "$tempDir\$outZip\$ModID"

          $regexAny = ".*", "*.7z", "*.bak", "*.bat", "*.iemod", "*.rar", "*.tar*", "*.tmp", "*.temp", "*.zip", 'backup', 'bgforge.ini', 'Thumbs.db', 'ehthumbs.db', '__macosx', '$RECYCLE.BIN'
          $excludedAny = Get-ChildItem -Path $ModTopDirectory\$ModID -Recurse -Include $regexAny

          #iemod package
          Copy-Item -Path $ModTopDirectory\$ModID\* -Destination $tempDir\$outIEMod\$ModID -Recurse -Exclude $regexAny | Out-Null

          Write-Host "Creating $PackageName.iemod" -ForegroundColor Green

          Compress-Archive -Path $tempDir\$outIEMod\* -DestinationPath "$ModTopDirectory\$PackageName.zip" -Force -CompressionLevel Optimal | Out-Null
          Rename-Item -Path "$ModTopDirectory\$PackageName.zip" -NewName "$ModTopDirectory\$PackageName.iemod" -Force | Out-Null

          # zip package
          Copy-Item -Path $ModTopDirectory\$ModID\* -Destination $tempDir\$outZip\$ModID -Recurse -Exclude $regexAny | Out-Null

          # get latest weidu version
          $datalastRelease = Invoke-RestMethod -Uri "https://api.github.com/repos/weiduorg/weidu/releases/latest" -Headers $Headers -Method Get
          $weiduWinUrl = $datalastRelease.assets | ? name -Match 'Windows' | Select-Object -ExpandProperty browser_download_url
          $weiduMacUrl = $datalastRelease.assets | ? name -Match 'Mac' | Select-Object -ExpandProperty browser_download_url

          Invoke-WebRequest -Uri $weiduWinUrl -Headers $Headers -OutFile 'WeiDU-Windows.zip' -PassThru | Out-Null
          Expand-Archive -Path 'WeiDU-Windows.zip' -DestinationPath '.' | Out-Null

          Invoke-WebRequest -Uri $weiduMacUrl -Headers $Headers -OutFile 'WeiDU-Mac.zip' -PassThru | Out-Null
          Expand-Archive -Path 'WeiDU-Mac.zip' -DestinationPath '.' | Out-Null

          # Copy latest WeiDU versions
          Copy-Item ".\WeiDU-Windows\bin\amd64\weidu.exe" "$tempDir\$outZip\$weiduExeBaseName.exe" | Out-Null
          Copy-Item ".\WeiDU-Mac\bin\amd64\weidu" "$tempDir\$outZip\$($weiduExeBaseName.tolower())" | Out-Null

          # Create .command script
          'cd "${0%/*}"' + "`n" + 'ScriptName="${0##*/}"' + "`n" + './${ScriptName%.*}' | Out-File -FilePath "$tempDir\$outZip\$($weiduExeBaseName.tolower()).command" | Out-Null

          Get-Content "$tempDir\$outZip\$($weiduExeBaseName.tolower()).command"

          Get-ChildItem "$tempDir\$outZip" -Recurse

          Write-Host "Creating $PackageName.zip" -ForegroundColor Green

          Compress-Archive -Path $tempDir\$outZip\* -DestinationPath "$ModTopDirectory\$PackageName.zip" -Force -CompressionLevel Optimal | Out-Null
          if ($excludedAny) {
              Write-Warning "Excluded items fom the package:"
              $excludedAny.FullName.Substring($ModTopDirectory.length) | Write-Warning
              pause
          }
          Write-Host "Finished." -ForegroundColor Green
          Write-Host "##[set-output name=PackageName;]$($PackageName)"

      - name: Add iemod package into latest release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.CreateModPackage.outputs.PackageName }}.iemod
          asset_name: ${{ steps.CreateModPackage.outputs.PackageName }}.iemod
          tag: ${{ github.ref }}
          overwrite: true

      - name: Add zip package into latest release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.CreateModPackage.outputs.PackageName }}.zip
          asset_name: ${{ steps.CreateModPackage.outputs.PackageName }}.zip
          tag: ${{ github.ref }}
          overwrite: true
